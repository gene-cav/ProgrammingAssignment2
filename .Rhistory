### Gene Cavagnaro
### R Programming on Coursera
### Programming Assignment 2
### November 9, 2022
## Put comments here that give an overall description of what your
## functions do
## Cache a matrix x and define a list of functions to:
# set: modify the matrix
# get: retrieve the stored matrix
# setinverse: store the inverse
# getinverse: retrieve the stored inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverted) inv <<- inverted
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Retrieve stored inverse of matrix, or else compute and store inverse.
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x1 <- matrix(c(0, 1, -1, 0), 2, 2)
makeCacheMatrix(x1)
cacheSolve(x)
cacheSolve(x1)
x1 <- makeCacheMatrix(x1)
cacheSolve(x1)
x$get()
x1$get()
View(x1)
### Gene Cavagnaro
### R Programming on Coursera
### Programming Assignment 2
### November 9, 2022
## Put comments here that give an overall description of what your
## functions do
## Cache a matrix x and define a list of functions to:
# set: modify the matrix
# get: retrieve the stored matrix
# setinverse: store the inverse
# getinverse: retrieve the stored inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverted) inv <<- inverted
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Retrieve stored inverse of matrix, or else compute and store inverse.
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x1 <- makeCacheMatrix(matrix(c(0, 1, -1, 0), 2, 2))
x1$get()
cacheSolve(x1)
x1$getinverse()
x1$set(matrix(c(0, 1, 0, 1, 1, 1, -1, 0, 2), 3, 3))
x1$getinverse()
cacheSolve(x1)
x1$getinverse()
cacheSolve(x1)
### Gene Cavagnaro
### R Programming on Coursera
### Programming Assignment 2
### November 9, 2022
## makeCacheMatrix: argument is a matrix. Returns a list of functions to:
# set: modify the matrix
# get: retrieve the matrix
# setinverse: store/modify the inverse (called by cacheSolve)
# getinverse: retrieve the inverse if previously set by setinverse.
## cacheSolve: argument is list of functions (as returned by makeCacheMatrix)
# returns the inverse of the matrix, storing it if necessary.
## Cache a matrix x and return a list of functions to access matrix and inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
# if the matrix's value is reset, forget the cached inverse
}
get <- function() x
setinverse <- function(inverted) inv <<- inverted
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Retrieve stored inverse of matrix, or else compute and store inverse.
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x1 <- makeCacheMatrix(matrix(c(0, 0, 1, 1, 0, 0, 0, -1, -1), 3, 3))
cacheSolve(x1)
x1$get() == x1$getinverse()
### Gene Cavagnaro
### R Programming on Coursera
### Programming Assignment 2
### November 9, 2022
## makeCacheMatrix: argument is a matrix. Returns a list of functions to:
# set: store/modify the matrix
# get: retrieve the matrix
# setinverse: store/modify the inverse (called by cacheSolve)
# getinverse: retrieve the inverse if previously set by setinverse.
## cacheSolve: argument is list of functions (as returned by makeCacheMatrix)
# returns the inverse of the matrix, storing it if necessary.
## Cache a matrix x and return a list of functions to access matrix and inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
# if the matrix's value is reset, forget the cached inverse
}
get <- function() x
setinverse <- function(inverted) inv <<- inverted
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Retrieve stored inverse of matrix, or else compute and store inverse.
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x2 <- makeCacheMatrix()
cacheSolve(x2)
